<?xml version="1.0"?>
<ruleset name="wayoxStandard">
    <arg name="tab-width" value="4"/>
    <description>WayoxMedia PHP Coding Standard</description>
    <!-- **** -->
    <!-- PSR1 -->
    <!-- **** -->
    <!-- 2. Files -->
    <!-- 2.1. PHP Tags -->
    <!--
        PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags;
        it MUST NOT use the other tag variations.
    -->
    <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
        <severity>0</severity>
    </rule>
    <!-- 2.2. Character Encoding -->
    <!-- PHP code MUST use only UTF-8 without BOM. -->
    <rule ref="Generic.Files.ByteOrderMark"/>
    <!-- 4. Class Constants, Properties, and Methods -->
    <!-- 4.1. Constants -->
    <!--
        Class constants MUST be declared in all upper case with underscore
        separators.
    -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <!-- 4.3. Methods -->
    <!-- Method names MUST be declared in camelCase(). -->
    <rule ref="PSR1.Methods.CamelCapsMethodName"/>
    <!-- **** -->
    <!-- PSR 1 Excluded -->
    <!-- <rule ref="Squiz.Classes.ValidClassName"/> -->
    <!-- <rule ref="PSR1.Classes.ClassDeclaration" /> -->
    <!-- <rule ref="PSR1.Files.SideEffects" /> -->
    <!-- **** -->
    <!-- **** END PSR1 **** -->
    <!-- **** -->
    <!-- PSR2 -->
    <!-- **** -->
    <!-- 2. General -->
    <arg name="tab-width" value="2"/>
    <rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
        <property name="indent" value="2"/>
        <property name="tabIndent" value="false"/>
    </properties>
    </rule>
    <!-- 2.1 Basic Coding Standard -->
    <!-- 2.2 Files -->
    <!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
    <rule ref="Generic.Files.LineEndings">
    <properties>
     <property name="eolChar" value="\n"/>
    </properties>
    </rule>
    <!-- 2.3 Lines -->
    <!--
        The soft limit on line length MUST be 120 characters; automated style
        checkers MUST warn but MUST NOT error at the soft limit.
    -->
    <rule ref="Generic.Files.LineLength">
    <properties>
        <property name="lineLimit" value="120"/>
        <property name="absoluteLineLimit" value="0"/>
    </properties>
    </rule>
    <!--
        There MUST NOT be trailing whitespace at the end of non-blank lines.
    -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>0</severity>
    </rule>
    <!-- There MUST NOT be more than one statement per line. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <!-- 3. Namespace and Use Declarations -->
    <!--
        When present, there MUST be one blank line after the namespace
        declaration.
    -->
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
    <!--
        When present, all use declarations MUST go after the namespace
        declaration.
        There MUST be one use keyword per declaration.
        There MUST be one blank line after the use block.
    -->
    <rule ref="PSR2.Namespaces.UseDeclaration"/>
    <!-- 4. Classes, Properties, and Methods -->
    <!-- 4.1. Extends and Implements -->
    <!--
        * The extends and implements keywords MUST be declared on the same line
          as the class name.
        * The opening brace for the class go MUST go on its own line;
          the closing brace for the class MUST go on the next line after
          the body.
        * Lists of implements MAY be split across multiple lines, where each
          subsequent line is indented once. When doing so, the first item in the
          list MUST be on the next line, and there MUST be only one interface
          per line.
    -->
    <!-- <rule ref="PSR2.Classes.ClassDeclaration"/> -->
    <!-- 4.2. Properties -->
    <!--
        Visibility MUST be declared on all properties.
        The var keyword MUST NOT be used to declare a property.
        There MUST NOT be more than one property declared per statement.
        Property names SHOULD NOT be prefixed with a single underscore to
        indicate protected or private visibility.
    -->
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <!-- 4.3 Methods -->
    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
    <!-- 4.4 Method Arguments -->
    <!--
        In the argument list, there MUST NOT be a space before each comma,
        and there MUST be one space after each comma.
    -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <rule ref=
        "Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint
    ">
        <severity>0</severity>
    </rule>
    <!--
        Method arguments with default values MUST go at the end of the argument
        list.
    -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <!-- 4.5 abstract, final, and static -->
    <!--
        When present, the abstract and final declarations MUST precede the
        visibility declaration.
        When present, the static declaration MUST come after the visibility
        declaration.
    -->
    <!-- <rule ref="PSR2.Methods.MethodDeclaration"/> -->
    <!-- 4.6 Method and Function Calls -->
    <!--
        When making a method or function call, there MUST NOT be a space between
        the method or function name and the opening parenthesis, there MUST NOT
        be a space after the opening parenthesis, and there MUST NOT be a space
        before the closing parenthesis. In the argument list, there MUST NOT
        be a space before each comma, and there MUST be one space after each
        comma.
        Argument lists MAY be split across multiple lines, where each subsequent
        line is indented once. When doing so, the first item in the list MUST be
        on the next line, and there MUST be only one argument per line.
    -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <!-- 5. Control Structures -->
    <!--
        The general style rules for control structures are as follows:
        * There MUST be one space after the control structure keyword.
        * There MUST NOT be a space after the opening parenthesis.
        * There MUST NOT be a space before the closing parenthesis.
        * There MUST be one space between the closing parenthesis and the
          opening brace.
        * The structure body MUST be indented once.
        * The closing brace MUST be on the next line after the body.
    -->
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpenBrace">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpaceBeforeCloseBrace">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.LineAfterClose">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.NoLineAfterClose">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>
    <!--
        The body of each structure MUST be enclosed by braces. This standardizes
        how the structures look, and reduces the likelihood of introducing
        errors as new lines get added to the body.
    -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <!-- 5.2. switch, case -->
    <!--
        The case statement MUST be indented once from switch, and the break
        keyword (or other terminating keyword) MUST be indented at the same
        level as the case body. There MUST be a comment such as
        // no break
        when fall-through is intentional in a non-empty case body.
    -->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>
    <!-- Commenting -->
    <rule ref="Squiz.Commenting.ClassComment"/>
    <rule ref="Squiz.Commenting.FunctionComment"/>
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>
    <rule ref="Squiz.Commenting.InlineComment"/>
    <rule ref="Squiz.Commenting.VariableComment"/>
    <!-- **** -->
    <!-- PSR 2 Excluded -->
    <!-- Lots of bits that are incomparable with CodeIgniter -->
    <!--
        Compare with
        https://github.com/squizlabs/PHP_CodeSniffer/blob/master/
            CodeSniffer/Standards/PSR2/ruleset.xml
    -->
    <!-- **** -->
    <!-- **** END PSR2 **** -->
    <!-- ********** -->
    <!-- Non-PSR Additions -->
    <!-- ********** -->
    <!-- Include some sniffs from all around the place -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Classes.OpeningBraceSameLine"/>
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
    <!-- **** END Non-PSR Additions **** -->
</ruleset>
